name: ci
on:
  push:
    branches:
      - main # main 브랜치의 push 감지
    paths:
      - "auth-service/**"
      - "common-module/**"
jobs:
  build-and-push:
    runs-on: ubuntu-latest # github actions가 실행될 환경: github가 제공하는 가상 머신에서 실행된다
    strategy:
      matrix:
        service: [ auth-service, common-module ]
    steps:
      - name: Checkout # 현재 리포지토리의 코드 가져오기
        uses: actions/checkout@v2

      - name: Set up JDK 17 # 자바 설치
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin' # 배포판 지정

      - name: Gradle Caching # 빌드 속도 향상을 위한 캐시 설정
        uses: actions/cache@v4 # Github actions에서 캐시를 저장하고 복원하는 기능. 이전에 저장된 캐시를 복원해 빌드 속도 향상
        with:
          path: | # 캐시 경로 지정 # 그래들이 다운로드한 라이브러리 및 빌드 캐시 / 그래들 래퍼 바이너리와 설정 파일
            ./.gradle/caches
            ./.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('./**/*.gradle*', './**gradle-wrapper.properties')}} # 캐시 키 지정. build.gradle, gradle-wrapper.properties 등의 해시값을 기반으로 한 고유 값으로 키를 지정해 동일한 키가 존재하면 기존 캐시를 복원함. 변경되면 새로운 캐시 생성
          restore-keys: | # GitHub Actions가 실행될 때 캐시를 찾을 수 없으면, 유사한 캐시를 찾아 복원하도록 설정하는 옵션.
            ${{ runner.os }}-gradle-

      - name: Build with Gradle # gradle 빌드 실행
        run: |
          chmod +x ./gradlew
          ./gradlew build

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Check and Create DockerHub Repository (if not exists)
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          REPO_NAME="${DOCKER_USERNAME}/rtr-${{ matrix.service }}"
            
          # DockerHub API에서 리포지토리 존재 여부 확인
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -u "$DOCKER_USERNAME:$DOCKER_PASSWORD" "https://hub.docker.com/v2/repositories/$REPO_NAME/")
            
          # 리포지토리가 없으면 생성
          if [ "$RESPONSE" -eq 404 ]; then
            echo "Repository $REPO_NAME not found. Creating..."
            curl -s -X POST "https://hub.docker.com/v2/repositories/" \
              -H "Content-Type: application/json" \
              -u "$DOCKER_USERNAME:$DOCKER_PASSWORD" \
              -d "{\"name\": \"rtr-${{ matrix.service }}\", \"namespace\": \"$DOCKER_USERNAME\", \"is_private\": false}"
            echo "Repository created successfully!"
          else
            echo "Repository $REPO_NAME already exists."
          fi

      - name: Docker Build & Push
        run: |
          docker build -t ${{secrets.DOCKER_USERNAME}}/rtr-${{ matrix.service }}:${GITHUB_SHA::7} ./${{ matrix.service }}
          docker push ${{ secrets.DOCKER_USERNAME }}/rtr-${{ matrix.service }}:${GITHUB_SHA::7}